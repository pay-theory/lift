# _concepts.yaml - Machine-readable concept map for Lift Framework
# This file helps AI assistants understand the semantic relationships in Lift

concepts:
  lift:
    type: framework
    language: go
    purpose: AWS Lambda development with type safety
    tagline: "Type-safe serverless framework for AWS Lambda in Go"
    provides:
      - type_safe_handlers
      - automatic_error_handling
      - structured_logging
      - distributed_tracing
      - request_validation
      - multi_tenant_support
      - middleware_system
      - event_source_adapters
    replaces:
      - raw_lambda_handlers
      - gin_on_lambda
      - echo_on_lambda
      - custom_middleware_implementations
    use_when:
      - building_aws_lambda_functions
      - need_production_grade_features
      - want_type_safety_in_serverless
      - building_multi_tenant_saas
      - need_consistent_error_handling
      - want_reduced_boilerplate
    dont_use_when:
      - not_using_aws_lambda
      - need_custom_runtime
      - using_languages_other_than_go
      - building_traditional_web_apps
    
  context:
    type: core_component
    purpose: unified request/response interface
    provides:
      - request_parsing
      - response_building
      - tenant_isolation
      - user_context
      - logging_access
      - tracing_support
    key_methods:
      - Bind: parse and validate request body
      - JSON: send JSON response
      - Param: get path parameter
      - Query: get query parameter
      - TenantID: get current tenant
      - UserID: get current user
      - Logger: access structured logger
    replaces:
      - manual_json_parsing
      - raw_event_access
      - custom_response_building
  
  handlers:
    type: pattern
    subtypes:
      simple_handler:
        signature: "func(ctx *Context, req T) (R, error)"
        provides:
          - automatic_request_parsing
          - automatic_validation
          - type_safe_responses
          - compile_time_checking
        use_when:
          - have_structured_request_response
          - want_type_safety
          - need_validation
      basic_handler:
        signature: "func(ctx *Context) error"
        provides:
          - flexible_handling
          - manual_parsing_control
        use_when:
          - complex_request_handling
          - dynamic_response_types
          - websocket_handlers
  
  middleware:
    type: component_system
    purpose: composable cross-cutting concerns
    standard_stack:
      - RequestID: generates unique request identifier
      - Logger: structured logging with request context
      - Recover: panic recovery and error response
      - ErrorHandler: consistent error formatting
    categories:
      observability:
        - Logger
        - Tracer
        - Metrics
      security:
        - JWT
        - CORS
        - RateLimit
      utility:
        - RequestID
        - Recover
        - ErrorHandler
        - Timeout
    composition_rules:
      - RequestID_before_Logger
      - Recover_before_business_logic
      - Auth_before_authorization
      - RateLimit_after_auth
  
  event_adapters:
    type: integration_layer
    purpose: unified interface for AWS event sources
    supported_sources:
      api_gateway:
        versions: [v1, v2]
        use_case: HTTP APIs
      sqs:
        use_case: async message processing
      s3:
        use_case: file processing triggers
      eventbridge:
        use_case: scheduled tasks and event routing
      dynamodb_streams:
        use_case: data change processing
      websocket:
        use_case: real-time connections
    pattern: "Adapter wraps event-specific handler with Context"
  
  multi_tenancy:
    type: feature_set
    purpose: SaaS application support
    provides:
      - tenant_isolation
      - user_context
      - account_hierarchy
      - automatic_scoping
    implementation:
      - jwt_claims_extraction
      - header_based_tenancy
      - context_propagation
      - middleware_enforcement
  
  validation:
    type: feature
    mechanism: struct_tags
    library: validator_v10
    provides:
      - declarative_validation
      - automatic_enforcement
      - detailed_error_messages
    common_tags:
      - required: field must be present
      - email: valid email format
      - min: minimum value/length
      - max: maximum value/length
      - oneof: enumerated values
      - url: valid URL format
  
  error_handling:
    type: system
    philosophy: explicit_is_better
    components:
      lift_error:
        fields: [status_code, message, details]
        purpose: structured API errors
      error_middleware:
        purpose: consistent error responses
        features:
          - sanitization
          - logging
          - status_mapping
    patterns:
      - return_errors_dont_panic
      - use_lift_errors_for_api_responses
      - log_errors_with_context
      - never_expose_internals
  
  testing:
    type: utilities
    package: pkg/testing
    provides:
      - test_app_creation
      - test_context_building
      - request_simulation
      - response_assertion
    patterns:
      - unit_test_handlers
      - integration_test_middleware
      - mock_aws_services
      - table_driven_tests
  
  performance:
    type: characteristics
    cold_start_overhead: 12ms
    warm_performance: <1ms
    memory_overhead: 5MB
    binary_size: 15MB
    optimizations:
      - context_pooling
      - lazy_parsing
      - minimal_dependencies
      - efficient_routing
    comparison:
      vs_raw_lambda:
        cold_start: +12ms
        features: +comprehensive
        code_reduction: 80%
      vs_web_frameworks:
        cold_start: -50%
        binary_size: -30%
        lambda_native: true