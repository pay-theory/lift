# _patterns.yaml - Machine-readable patterns for Lift Framework
# This file documents correct and incorrect patterns for AI training

patterns:
  # Handler Patterns
  lambda_handler:
    name: "Lift Handler Pattern"
    problem: "Lambda functions need consistent error handling and observability"
    solution: "Use lift.Context and lift.Start"
    correct_example: |
      func main() {
          app := lift.New()
          app.Use(middleware.Logger())
          app.POST("/users", HandleCreateUser)
          lambda.Start(app.HandleRequest)
      }
      
      func HandleCreateUser(ctx *lift.Context) error {
          var req CreateUserRequest
          if err := ctx.Bind(&req); err != nil {
              return lift.BadRequest(err)
          }
          // Business logic
          return ctx.JSON(200, response)
      }
    anti_patterns:
      - name: "Raw Lambda Handler"
        why: "Lacks error handling, logging, validation, and observability"
        incorrect_example: |
          func handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
              // Manual parsing, no validation, no logging
              var body map[string]interface{}
              json.Unmarshal([]byte(request.Body), &body)
              // Manual response building
              return events.APIGatewayProxyResponse{
                  StatusCode: 200,
                  Body: "{}",
              }, nil
          }
        consequences:
          - no_automatic_error_handling
          - no_request_validation
          - no_structured_logging
          - no_distributed_tracing
          - manual_response_formatting
  
  type_safe_handler:
    name: "Type-Safe Handler Pattern"
    problem: "Runtime type errors and manual validation"
    solution: "Use lift.SimpleHandler with typed request/response"
    correct_example: |
      type CreateOrderRequest struct {
          Items []Item `json:"items" validate:"required,min=1"`
          Total int64  `json:"total" validate:"required,min=100"`
      }
      
      type OrderResponse struct {
          OrderID string `json:"order_id"`
          Status  string `json:"status"`
      }
      
      app.POST("/orders", lift.SimpleHandler(func(ctx *lift.Context, req CreateOrderRequest) (OrderResponse, error) {
          // Request is parsed and validated
          // Response type is enforced
          order := processOrder(req)
          return OrderResponse{
              OrderID: order.ID,
              Status:  "created",
          }, nil
      }))
    anti_patterns:
      - name: "Manual Type Handling"
        why: "Error-prone and verbose"
        incorrect_example: |
          app.POST("/orders", func(ctx *lift.Context) error {
              body := ctx.Body
              var req map[string]interface{}
              json.Unmarshal(body, &req)
              
              // Manual validation
              if req["total"].(float64) < 100 {
                  return errors.New("total too small")
              }
              
              // Manual response building
              resp := map[string]string{
                  "order_id": "123",
                  "status": "created",
              }
              return ctx.JSON(200, resp)
          }
  
  middleware_composition:
    name: "Middleware Composition Pattern"
    problem: "Cross-cutting concerns mixed with business logic"
    solution: "Use middleware chains for separation of concerns"
    correct_example: |
      // Global middleware
      app.Use(middleware.RequestID())
      app.Use(middleware.Logger())
      app.Use(middleware.Recover())
      
      // API group with auth
      api := app.Group("/api")
      api.Use(middleware.JWT(jwtConfig))
      api.Use(middleware.RateLimitUser())
      
      // Admin group with additional checks
      admin := api.Group("/admin")
      admin.Use(middleware.RequireRole("admin"))
      
      // Routes inherit middleware
      api.GET("/orders", GetOrders)      // Has: RequestID, Logger, JWT, RateLimit
      admin.GET("/users", ListAllUsers)  // Has: All above + RequireRole
    anti_patterns:
      - name: "Inline Authorization"
        why: "Repetitive and error-prone"
        incorrect_example: |
          app.GET("/orders", func(ctx *lift.Context) error {
              // Don't do auth in every handler
              token := ctx.Header("Authorization")
              if !validateToken(token) {
                  return lift.Unauthorized()
              }
              
              // Don't check roles in handlers
              if !hasRole(token, "user") {
                  return lift.Forbidden()
              }
              
              // Actual business logic buried
              return getOrders(ctx)
          }
  
  request_validation:
    name: "Declarative Validation Pattern"
    problem: "Manual validation is error-prone and verbose"
    solution: "Use struct tags for automatic validation"
    correct_example: |
      type PaymentRequest struct {
          Amount   int64  `json:"amount" validate:"required,min=100,max=1000000"`
          Currency string `json:"currency" validate:"required,oneof=USD EUR GBP"`
          Email    string `json:"email" validate:"required,email"`
          Card     Card   `json:"card" validate:"required"`
      }
      
      type Card struct {
          Number string `json:"number" validate:"required,credit_card"`
          CVV    string `json:"cvv" validate:"required,len=3|len=4"`
          Expiry string `json:"expiry" validate:"required,datetime=01/06"`
      }
      
      // Validation happens automatically
      app.POST("/payments", lift.SimpleHandler(func(ctx *lift.Context, req PaymentRequest) (PaymentResponse, error) {
          // req is guaranteed valid
          return processPayment(req)
      }))
    anti_patterns:
      - name: "Manual Validation"
        why: "Verbose and easy to miss edge cases"
        incorrect_example: |
          if req.Amount < 100 {
              return errors.New("amount too small")
          }
          if req.Amount > 1000000 {
              return errors.New("amount too large")
          }
          if req.Currency != "USD" && req.Currency != "EUR" && req.Currency != "GBP" {
              return errors.New("invalid currency")
          }
          if !isValidEmail(req.Email) {
              return errors.New("invalid email")
          }
          // Easy to forget validation
  
  error_handling:
    name: "Structured Error Pattern"
    problem: "Inconsistent error responses across endpoints"
    solution: "Use lift.Error types and error middleware"
    correct_example: |
      // Structured errors with proper status codes
      func GetUser(ctx *lift.Context) error {
          userID := ctx.Param("id")
          
          user, err := db.GetUser(userID)
          if err == sql.ErrNoRows {
              return lift.NotFound("user not found")
          }
          if err != nil {
              // Internal errors are logged but not exposed
              ctx.Logger.Error("database error", "error", err)
              return lift.InternalError("failed to get user")
          }
          
          return ctx.JSON(200, user)
      }
      
      // With details
      return lift.NewError(400, "validation failed", map[string]interface{}{
          "field": "email",
          "error": "invalid format",
      })
    anti_patterns:
      - name: "Raw Error Returns"
        why: "Exposes internals and inconsistent format"
        incorrect_example: |
          user, err := db.GetUser(userID)
          if err != nil {
              // Don't expose database errors
              return err
          }
          
          // Don't use fmt.Errorf for API errors
          return fmt.Errorf("user %s not found", userID)
          
          // Don't return status in error message
          return errors.New("404: not found")
  
  multi_tenant_context:
    name: "Multi-Tenant Isolation Pattern"
    problem: "Manual tenant isolation is error-prone"
    solution: "Use Context tenant helpers"
    correct_example: |
      // Tenant ID automatically extracted from JWT/headers
      func GetTenantData(ctx *lift.Context) error {
          tenantID := ctx.TenantID()
          userID := ctx.UserID()
          
          // Queries automatically scoped to tenant
          data := db.Query(`
              SELECT * FROM data 
              WHERE tenant_id = ? AND user_id = ?
          `, tenantID, userID)
          
          return ctx.JSON(200, data)
      }
      
      // For admin endpoints
      func GetAllTenants(ctx *lift.Context) error {
          // Check if user is system admin
          if !ctx.IsSystemAdmin() {
              return lift.Forbidden("system admin required")
          }
          
          tenants := db.GetAllTenants()
          return ctx.JSON(200, tenants)
      }
    anti_patterns:
      - name: "Manual Tenant Extraction"
        why: "Security risk and inconsistent"
        incorrect_example: |
          // Don't manually parse tokens
          token := ctx.Header("Authorization")
          claims := parseJWT(token)
          tenantID := claims["tenant_id"].(string)
          
          // Don't trust client headers
          tenantID := ctx.Header("X-Tenant-ID")
          
          // Don't forget tenant scoping
          data := db.Query("SELECT * FROM data WHERE user_id = ?", userID)
          // Missing tenant_id filter!
  
  event_adapter_usage:
    name: "Event Adapter Pattern"
    problem: "Different AWS events have different shapes"
    solution: "Use adapters for consistent Context interface"
    correct_example: |
      import "github.com/pay-theory/lift/pkg/adapters/sqs"
      
      // SQS message processing
      app.Handle(sqs.Adapter(func(ctx *lift.Context, messages []sqs.Message) error {
          for _, msg := range messages {
              // Same Context interface as HTTP handlers
              ctx.Logger.Info("Processing", "messageId", msg.MessageId)
              
              if err := processMessage(msg); err != nil {
                  // Return error to retry message
                  return err
              }
          }
          return nil
      }))
      
      // S3 event processing
      app.Handle(s3.Adapter(func(ctx *lift.Context, records []s3.Record) error {
          for _, record := range records {
              // Consistent logging and error handling
              if err := processFile(record.Bucket, record.Key); err != nil {
                  ctx.Logger.Error("Failed to process", "error", err)
                  return err
              }
          }
          return nil
      }))
    anti_patterns:
      - name: "Raw Event Handling"
        why: "Loses Context benefits"
        incorrect_example: |
          // Don't use raw Lambda events
          func handler(event events.SQSEvent) error {
              // No access to Context features
              for _, record := range event.Records {
                  // No structured logging
                  log.Printf("Processing %s", record.MessageId)
                  
                  // No consistent error handling
                  if err := process(record); err != nil {
                      log.Printf("Error: %v", err)
                  }
              }
          }
  
  rate_limiting:
    name: "Rate Limiting Pattern"
    problem: "API abuse and resource exhaustion"
    solution: "Use Limited library integration"
    correct_example: |
      // IP-based rate limiting (simple)
      ipLimiter, _ := middleware.IPRateLimitWithLimited(1000, time.Hour)
      app.Use(ipLimiter)
      
      // User-based rate limiting (authenticated routes)
      userLimiter, _ := middleware.UserRateLimitWithLimited(100, 15*time.Minute)
      api.Use(userLimiter)
      
      // Tenant-based rate limiting (multi-tenant)
      tenantLimiter, _ := middleware.TenantRateLimitWithLimited(5000, time.Hour)
      api.Use(tenantLimiter)
      
      // Custom rate limiting
      customLimiter, _ := middleware.LimitedRateLimit(middleware.LimitedConfig{
          Region:    "us-east-1",
          TableName: "rate-limits",
          Window:    time.Minute,
          Limit:     10,
          KeyFunc: func(ctx *lift.Context) string {
              // Custom key based on endpoint + user
              return fmt.Sprintf("%s:%s", ctx.Path, ctx.UserID())
          },
      })
    anti_patterns:
      - name: "In-Memory Rate Limiting"
        why: "Doesn't work with Lambda's stateless nature"
        incorrect_example: |
          // Don't use in-memory stores
          var requestCounts = make(map[string]int)
          
          func rateLimitMiddleware(ctx *lift.Context) error {
              ip := ctx.ClientIP()
              requestCounts[ip]++
              
              if requestCounts[ip] > 100 {
                  return lift.TooManyRequests()
              }
              
              return ctx.Next()
          }
          // This resets on every cold start!
  
  testing_patterns:
    name: "Handler Testing Pattern"
    problem: "Testing Lambda handlers requires setup"
    solution: "Use lift testing utilities"
    correct_example: |
      func TestCreateUser(t *testing.T) {
          // Create test app
          app := testing.NewTestApp()
          app.POST("/users", CreateUser)
          
          // Create test context
          ctx := testing.NewTestContext(
              testing.WithRequest(testing.Request{
                  Method: "POST",
                  Path:   "/users",
                  Body:   `{"name": "John", "email": "john@example.com"}`,
                  Headers: map[string]string{
                      "Authorization": "Bearer test-token",
                  },
              }),
          )
          
          // Execute handler
          err := app.HandleTestRequest(ctx)
          assert.NoError(t, err)
          
          // Check response
          assert.Equal(t, 201, ctx.Response.StatusCode)
          
          var resp UserResponse
          json.Unmarshal(ctx.Response.Body, &resp)
          assert.Equal(t, "John", resp.Name)
      }
      
      // Table-driven tests
      func TestValidation(t *testing.T) {
          tests := []struct {
              name    string
              request string
              wantErr bool
          }{
              {"valid", `{"age": 25}`, false},
              {"too young", `{"age": -1}`, true},
              {"too old", `{"age": 150}`, true},
          }
          
          for _, tt := range tests {
              t.Run(tt.name, func(t *testing.T) {
                  ctx := testing.NewTestContext(
                      testing.WithBody(tt.request),
                  )
                  err := ValidateAge(ctx)
                  assert.Equal(t, tt.wantErr, err != nil)
              })
          }
      }
    anti_patterns:
      - name: "Testing with Real Lambda"
        why: "Slow and requires deployment"
        incorrect_example: |
          // Don't invoke real Lambda for unit tests
          result, err := lambda.Invoke(&lambda.InvokeInput{
              FunctionName: aws.String("my-function"),
              Payload:      []byte(`{"path": "/users"}`),
          })
          
          // Don't test against deployed endpoints
          resp, err := http.Post("https://api.example.com/users", ...)
  
  configuration:
    name: "Application Configuration Pattern"
    problem: "Lambda functions need environment-specific config"
    solution: "Use lift.New with options"
    correct_example: |
      func main() {
          app := lift.New(
              // Timeout less than Lambda timeout
              lift.WithTimeout(getLambdaTimeout() - 5*time.Second),
              
              // Request size limits
              lift.WithMaxBodySize(5 * 1024 * 1024), // 5MB
              
              // Custom logger
              lift.WithLogger(createLogger()),
              
              // Environment-based config
              lift.WithEnvironment(os.Getenv("ENVIRONMENT")),
          )
          
          // Middleware based on environment
          if os.Getenv("ENVIRONMENT") == "production" {
              app.Use(middleware.RateLimit())
              app.Use(middleware.SecurityHeaders())
          } else {
              app.Use(middleware.DebugLogger())
          }
          
          lambda.Start(app.HandleRequest)
      }
    anti_patterns:
      - name: "Hard-coded Configuration"
        why: "Not flexible across environments"
        incorrect_example: |
          app := lift.New()
          // Don't hardcode timeouts
          app.timeout = 30 * time.Second
          
          // Don't hardcode environment values
          app.Use(middleware.JWT(middleware.JWTConfig{
              Secret: "my-secret-key", // Use environment variables!
          }))